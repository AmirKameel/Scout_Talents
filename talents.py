# -*- coding: utf-8 -*-
"""talents.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D63McadjuaNiHdSZPAtwZf8OBvA9X0jT
"""

import pandas as pd
import os

data = pd.read_csv('2022-2023 Football Player Stats.csv',   sep = ';', encoding = 'ISO-8859-1')
pd.set_option('display.max_columns', None)
data.head()

df_data = pd.DataFrame()
df_data['Player'] = data['Player']
df_data['Nation'] = data['Nation']
df_data['Pos'] = data['Pos']
df_data['Squad'] = data['Squad']
df_data['Comp'] = data['Comp']
df_data['Age'] = data['Age']
df_data['MP'] = data['MP']
df_data['G/90'] = data['Goals']
#df_data['G/Sh'] = data['G/Sh']
#df_data['PKGoals'] = ((data['ShoPK'] * data['Min']) / 90).round(0).astype(int)
#df_data['PKAttempted'] = ((data['PKatt'] * data['Min']) / 90).round(0).astype(int)
#df_data['Goals'] = ((data['Goals'] * data['Min']) / 90).round(0).astype(int)
df_data['Pass'] = ((data['PasTotAtt'] * data['Min']) / 90).round(0).astype(int)
df_data['PassCompleted'] = ((data['PasTotCmp'] * data['Min']) / 90).round(0).astype(int)
df_data['PassComp%'] = ((df_data['PassCompleted'] / df_data['Pass']) * 100).round(2)
df_data['Assist'] = ((data['Assists'] * data['Min']) / 90).round(0).astype(int)
df_data['Cross'] = ((data['PasCrs'] * data['Min']) / 90).round(0).astype(int)
df_data['CrossCompleted'] = ((data['CrsPA'] * data['Min']) / 90).round(0).astype(int)
df_data['CrossComp%'] = ((df_data['CrossCompleted'] / df_data['Cross']) * 100).round(2)
df_data['Tackle_Won'] = ((data['TklWon'] * data['Min']) / 90).round(0).astype(int)
#df_data['SucDribble'] = ((data['DriSucc'] * data['Min']) / 90).round(0).astype(int)
#df_data['Dribble'] = ((data['DriAtt'] * data['Min']) / 90).round(0).astype(int)
#df_data['DribbleComp%'] = ((df_data['SucDribble'] / df_data['Dribble']) * 100).round(2)
#df_data['YCards'] = ((data['CrdY'] * data['Min']) / 90).round(0).astype(int)
#df_data['RCards'] = ((data['CrdR'] * data['Min']) / 90).round(0).astype(int)
#df_data['Fls'] = ((data['Fls'] * data['Min']) / 90).round(0).astype(int)
#df_data['Fld'] = ((data['Fld'] * data['Min']) / 90).round(0).astype(int)
#df_data['OGoals'] = ((data['OG'] * data['Min']) / 90).round(0).astype(int)
df_data['AerWon'] = ((data['AerWon'] * data['Min']) / 90).round(0).astype(int)
#df_data['AerLost'] = ((data['AerLost'] * data['Min']) / 90).round(0).astype(int)
#df_data['AerWon%'] = ((data['AerWon'] / (data['AerWon'] + data['AerLost'])) * 100).round(2)
df_data.head()

df_data["Nation"].value_counts()

df_data["Comp"].value_counts()

(df_data[(df_data.MP >= 20) & (df_data.Pos != 'GK')].sort_values('G/90', ascending = False)).head().iloc[: , [0,1,2,3,4,5,7]]

team_goals = df_data.groupby(['Squad']).agg(Team_Goals = ('G/90', 'sum'))
team_goals = pd.DataFrame(team_goals).reset_index()
team_goals.sort_values('Team_Goals', ascending = False).head(6)

(df_data[df_data.MP >= 20].sort_values('PassCompleted', ascending = False)
                                            .head(5)
                                            .iloc[:, [0,1,2,3,4,5,9]])

team_pass_comp = df_data.groupby(['Squad']).agg(Pass_Attempted = ('Pass', 'sum'), Pass_Completion = ('PassCompleted', 'sum'))
team_pass_comp = pd.DataFrame(team_pass_comp).reset_index()
team_pass_comp['PassComp%'] = ((team_pass_comp['Pass_Completion'] / team_pass_comp['Pass_Attempted']) * 100).round(2)
team_pass_comp = team_pass_comp.sort_values('PassComp%', ascending = False).head(6).iloc[:, [0,-1]]
team_pass_comp

(df_data[(df_data.MP >= 18) & (df_data.Pos.str.contains('DF'))].sort_values('AerWon', ascending = False)
                                                                                             .head(5)
                                                                                             .iloc[:, [0,1,2,3,4,5,16]])

(df_data[df_data.MP >= 15].sort_values('CrossCompleted', ascending = False)
                                            .head(5)
                                            .iloc[:, [0,1,2,3,4,5,13]])

(df_data[(df_data.MP >= 15) & (df_data.Pos.str.contains('MF'))].sort_values('CrossComp%', ascending = False)
                                                                                             .head(5)
                                                                                             .iloc[:, [0,1,2,3,4,5,14]])

team_cross_comp = df_data.groupby(['Squad']).agg(Cross_Attempted = ('Cross', 'sum'),
                                                           Cross_Completion = ('CrossCompleted', 'sum'))
team_cross_comp = pd.DataFrame(team_cross_comp).reset_index()
team_cross_comp['CrossComp%'] = ((team_cross_comp['Cross_Completion'] / team_cross_comp['Cross_Attempted']) * 100).round(2)
team_cross_comp = team_cross_comp.sort_values('CrossComp%', ascending = False).head(5).iloc[:, [0,-1]]
team_cross_comp

df_data.sort_values('Assist', ascending = False).head(8).iloc[:, [0,1,2,3,4,5,11]]

df_data.sort_values('Tackle_Won', ascending = False).head(5).iloc[:, [0,1,2,3,4,5,15]]

team_tackle_won = df_data.groupby(['Squad']).agg(Team_TackleWon = ('Tackle_Won', 'sum'))
team_tackle_won = pd.DataFrame(team_tackle_won).reset_index()
team_tackle_won.sort_values('Team_TackleWon', ascending = False).head(6)

new_df=df_data[df_data.Age < 24]

new_df

#df_data['YCards'] = ((data['CrdY'] * data['Min']) / 90).round(0).astype(int)
#df_data['RCards'] = ((data['CrdR'] * data['Min']) / 90).round(0).astype(int)

new_df['Yellow'] = ((data['CrdY'] * data['Min']) / 90).round(0).astype(int)
#new_df['Second yellow'] = data['2CrdY']
new_df['Red'] = ((data['CrdR'] * data['Min']) / 90).round(0).astype(int)
new_df.head()

new_df['Yellow'].value_counts()

new_df['Red'].value_counts()

new_df['Red'].unique()

new_df['Yellow'].unique()

new_df.sort_values('Yellow', ascending = False).head(10).iloc[:, [0,1,2,3,4,5,17,18]]

new_df.sort_values('Red', ascending = False).head(5).iloc[:, [0,1,2,3,4,5,17,18]]

# Calculate the average goals per 90 minutes for each position
for position in ["GK", "DF", "MF", "FW"]:
    df_position = new_df[new_df["Pos"] == position]
    avg_goals_per_90 = df_position["G/90"].mean()
    print(f"The average goals per 90 minutes for {position} is {avg_goals_per_90}")

# Calculate the number of players who have scored at least 1 goal per 90 minutes
num_players_with_5_goal_per_90 = new_df[new_df["G/90"] >= 5]
#print(f"There are {num_players_with_1_goal_per_90} players who have scored at least 1 goal per 90 minutes")

num_players_with_5_goal_per_90

# Calculate the number of players who have won at least 50% of their tackles
num_players_with_50_percent_tackles_won = new_df[new_df["Tackle_Won"] / new_df["MP"] >= 0.5]
#print(f"There are {num_players_with_50_percent_tackles_won} players who have won at least 50% of their tackles")

num_players_with_50_percent_tackles_won

new_df

new_df['G/90'].replace(0,1)
#y.replace(0,4)
new_df['Assist'].replace(0,1)
new_df['Pass'].replace(0,1)
new_df['PassCompleted'].replace(0,1)
new_df['PassComp%'].replace(0,5)
new_df['Tackle_Won'].replace(0,1)
new_df['AerWon'].replace(0,1)
#new_df['AerLost'].replace(0,1)
new_df['Cross'].replace(0,1)
new_df['CrossCompleted'].replace(0,1)
new_df['CrossComp%'].replace(0,2)
#new_df['Yellow'].replace(0,1)
new_df.isnull().sum()



#I understand. You can use a supervised learning algorithm to categorize the players into talents and non-talents. Here is a Python script that you can use:

#Python
import pandas as pd
from sklearn.cluster import KMeans

# Read the data from a CSV file
#df = pd.read_csv("players.csv")

# Create a target variable for whether the player is a talent
#new_df["Talent"] = [True if player["Talent"] == "Yes" else False for player in new_df["Talent"]]

# Create a KMeans model with 2 clusters
model = KMeans(n_clusters=2)

# Fit the model to the data
model.fit(new_df[["Age", "MP", "G/90", "Pass", "PassCompleted",  "Assist", "Cross", "CrossCompleted","Tackle_Won", "AerWon"]])

# Predict the cluster labels for each player
labels = model.predict(new_df[["Age", "MP", "G/90", "Pass", "PassCompleted",  "Assist", "Cross", "CrossCompleted",  "Tackle_Won", "AerWon"]])

# Add the cluster labels to the data frame
new_df["Cluster"] = labels

# Print the cluster labels for each player
for i in range(len(new_df)):
    print(f"Player {i} is in cluster {new_df['Cluster'].iloc[i]}.")

new_df

new_df.Cluster.value_counts()

df1 = new_df[new_df['Cluster'] == 1]
df1

X = new_df[["Age", "MP", "G/90", "Pass", "PassCompleted", "PassComp%", "Assist", "Cross", "CrossCompleted", "CrossComp%", "Tackle_Won", "AerWon"]]
y= new_df['Cluster']

X.isnull().sum()

from sklearn.impute import KNNImputer

# Read the data from a CSV file
#df = pd.read_csv("players.csv")

# Create a KNN imputer
imputer = KNNImputer(n_neighbors=5)

# Impute the NaN values in the "PassComplete%" column
X["PassComp%"] = imputer.fit_transform(X[["PassComp%"]])

# Impute the NaN values in the "CrossComplete%" column
X["CrossComp%"] = imputer.fit_transform(X[["CrossComp%"]])

X.isnull().sum()

from sklearn.model_selection import train_test_split
X_train , X_test , y_train , y_test = train_test_split(X,y, test_size = .2 , random_state=44)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(X_train,y_train)

print('LogisticRegressionModel Train Score is : ' , model.score(X_train, y_train))
print('LogisticRegressionModel Test Score is : ' , model.score(X_test, y_test))
print('LogisticRegressionModel Classes are : ' , model.classes_)
print('LogisticRegressionModel No. of iteratios is : ' , model.n_iter_)
print('----------------------------------------------------')

#Calculating Prediction
y_pred = model.predict(X_test)
y_pred_prob = model.predict_proba(X_test)
print('Predicted Value for first 10 players is : ' , y_pred[:10])
#print('Prediction Probabilities Value for LogisticRegressionModel is : ' , y_pred_prob[:10])

# Make predictions on new data
new_player = [1,22,1,200,100,40,0,20,3,2,2,2]
prediction = model.predict([new_player])
print(f"The model predicts that the new player is {prediction[0]} a talent")

import joblib
# Save the model
joblib.dump(model, "model.pkl")
joblib.load('model.pkl')



df1.to_csv("talents.csv", index=False)